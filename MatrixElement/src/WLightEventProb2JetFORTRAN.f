      SUBROUTINE WmJJM(P1,MW,ANS)
C  
C Generated by MadGraph II                                              
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C AND HELICITIES
C FOR THE POINT IN PHASE SPACE P(0:3,6)
C  
C FOR PROCESS : g d -> e- ve~ u g  
C  
C Crossing   1 is g d -> e- ve~ u g  
      IMPLICIT NONE
C  
C CONSTANTS
C  
C     NN       Include "genps.inc"
C     NN       Include "6.inc"
C     NN       Include "maxamps.inc"
      INTEGER                 NCOMB,     NCROSS         
      PARAMETER (             NCOMB=  64, NCROSS=  1)
C     NN       INTEGER    THEL
C     NN       PARAMETER (THEL=NCOMB*NCROSS)
C  
C ARGUMENTS 
C  
      REAL*8 P1(0:3,6),ANS(NCROSS)
C  
C LOCAL VARIABLES 
C  
      INTEGER NHEL(6,NCOMB),NTRY
      REAL*8 T, P(0:3,6)
      REAL*8 MW
      REAL*8 WmJJ
      INTEGER IHEL,IDEN(NCROSS),IC(6,NCROSS)
      INTEGER IPROC,JC(6), I
      LOGICAL GOODHEL(NCOMB,NCROSS)
      INTEGER NGRAPHS
C   NN       REAL*8 hwgt, xtot, xtry, xrej, xr, yfrac(0:ncomb)
C   NN       INTEGER idum, ngood, igood(ncomb), jhel, j, jj
C   NN       LOGICAL warned
C   NN       REAL     xran1
C   NN       EXTERNAL xran1
C  
C GLOBAL VARIABLES
C  
C   NN       Double Precision amp2(maxamps), jamp2(0:maxamps)
C   NN       common/to_amps/  amp2,       jamp2
C   NN 
C   NN       character*79         hel_buff
C   NN       common/to_helicity/  hel_buff
C   NN 
C   NN       REAL*8 POL(2)
C   NN       common/to_polarization/ POL
C   NN 
C   NN       integer          isum_hel
C   NN       logical                    multi_channel
C   NN       common/to_matrix/isum_hel, multi_channel
C   NN       INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
C   NN       common/to_mconfigs/mapconfig, iconfig
C   NN       DATA NTRY,IDUM /0,-1/
C   NN       DATA xtry, xrej, ngood /0,0,0/
C   NN       DATA warned, isum_hel/.false.,0/
C   NN       DATA multi_channel/.true./
C   NN       SAVE yfrac, igood, jhel
C   NN       DATA NGRAPHS /    8/          
C   NN       DATA jamp2(0) /   2/          
C   NN       DATA GOODHEL/THEL*.FALSE./
      DATA (NHEL(IHEL,   1),IHEL=1, 6) /-1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,   2),IHEL=1, 6) /-1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,   3),IHEL=1, 6) /-1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,   4),IHEL=1, 6) /-1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,   5),IHEL=1, 6) /-1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,   6),IHEL=1, 6) /-1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,   7),IHEL=1, 6) /-1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,   8),IHEL=1, 6) /-1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,   9),IHEL=1, 6) /-1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  10),IHEL=1, 6) /-1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  11),IHEL=1, 6) /-1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  12),IHEL=1, 6) /-1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  13),IHEL=1, 6) /-1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  14),IHEL=1, 6) /-1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  15),IHEL=1, 6) /-1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  16),IHEL=1, 6) /-1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  17),IHEL=1, 6) /-1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  18),IHEL=1, 6) /-1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  19),IHEL=1, 6) /-1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  20),IHEL=1, 6) /-1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  21),IHEL=1, 6) /-1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  22),IHEL=1, 6) /-1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  23),IHEL=1, 6) /-1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  24),IHEL=1, 6) /-1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  25),IHEL=1, 6) /-1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  26),IHEL=1, 6) /-1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  27),IHEL=1, 6) /-1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  28),IHEL=1, 6) /-1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  29),IHEL=1, 6) /-1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  30),IHEL=1, 6) /-1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  31),IHEL=1, 6) /-1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  32),IHEL=1, 6) /-1, 1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  33),IHEL=1, 6) / 1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  34),IHEL=1, 6) / 1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  35),IHEL=1, 6) / 1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  36),IHEL=1, 6) / 1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  37),IHEL=1, 6) / 1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  38),IHEL=1, 6) / 1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  39),IHEL=1, 6) / 1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  40),IHEL=1, 6) / 1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  41),IHEL=1, 6) / 1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  42),IHEL=1, 6) / 1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  43),IHEL=1, 6) / 1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  44),IHEL=1, 6) / 1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  45),IHEL=1, 6) / 1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  46),IHEL=1, 6) / 1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  47),IHEL=1, 6) / 1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  48),IHEL=1, 6) / 1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  49),IHEL=1, 6) / 1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  50),IHEL=1, 6) / 1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  51),IHEL=1, 6) / 1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  52),IHEL=1, 6) / 1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  53),IHEL=1, 6) / 1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  54),IHEL=1, 6) / 1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  55),IHEL=1, 6) / 1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  56),IHEL=1, 6) / 1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  57),IHEL=1, 6) / 1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  58),IHEL=1, 6) / 1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  59),IHEL=1, 6) / 1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  60),IHEL=1, 6) / 1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  61),IHEL=1, 6) / 1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  62),IHEL=1, 6) / 1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  63),IHEL=1, 6) / 1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  64),IHEL=1, 6) / 1, 1, 1, 1, 1, 1/
      DATA (  IC(IHEL,  1),IHEL=1, 6) / 1, 2, 3, 4, 5, 6/
      DATA (IDEN(IHEL),IHEL=  1,  1) /  96/
C ----------
C BEGIN CODE
C ----------
C     ADDED ALL THESE LINES
      ANS(1) = 0D0
      PRINT *,"STARTING NCOMB=",NCOMB
      DO IHEL=1,NCOMB
        T= WmJJ(P1 ,MW,NHEL(1,IHEL))		
        ANS(1)=ANS(1)+T
C        PRINT *,"IHEL= ", IHEL," T= ",T," ME=",ANS(1)," IDEN(1)= "
        IF (T .GT. 0) THEN 
           PRINT *," IHEL= ", IHEL," T= ",T," ME=",ANS(1)," IDEN(1)= ",
     & DBLE(IDEN(1))
	ENDIF
      ENDDO
      
      ANS(1)=ANS(1)/DBLE(IDEN(1))
C     END ADDED ALL THESE LINES
C   NN        NTRY=NTRY+1
C   NN        DO IPROC=1,NCROSS
C   NN        CALL SWITCHMOM(P1,P,IC(1,IPROC),JC,6)
C   NN        DO IHEL=1,6
C   NN           JC(IHEL) = +1
C   NN        ENDDO
C   NN         
C   NN        IF (multi_channel) THEN
C   NN            DO IHEL=1,NGRAPHS
C   NN                amp2(ihel)=0d0
C   NN                jamp2(ihel)=0d0
C   NN            ENDDO
C   NN            DO IHEL=1,int(jamp2(0))
C   NN                jamp2(ihel)=0d0
C   NN            ENDDO
C   NN        ENDIF
C   NN        ANS(IPROC) = 0D0
C   NN        write(hel_buff,'(16i5)') (0,i=1,6)
C   NN        IF (ISUM_HEL .EQ. 0 .OR. NTRY .LT. 10) THEN
C   NN            DO IHEL=1,NCOMB
C   NN               IF (GOODHEL(IHEL,IPROC) .OR. NTRY .LT. 2) THEN
C   NN                   T=MATRIX(P ,NHEL(1,IHEL),JC(1))            
C   NN                 DO JJ=1,nincoming
C   NN                   IF(POL(JJ).NE.1d0.AND.
C   NN       &              NHEL(JJ,IHEL).EQ.INT(SIGN(1d0,POL(JJ)))) THEN
C   NN                     T=T*ABS(POL(JJ))
C   NN                   ELSE IF(POL(JJ).NE.1d0)THEN
C   NN                     T=T*(2d0-ABS(POL(JJ)))
C   NN                   ENDIF
C   NN                 ENDDO
C   NN                 ANS(IPROC)=ANS(IPROC)+T
C   NN                 IF (T .NE. 0D0 .AND. .NOT.    GOODHEL(IHEL,IPROC)) THEN
C   NN                     GOODHEL(IHEL,IPROC)=.TRUE.
C   NN                     NGOOD = NGOOD +1
C   NN                     IGOOD(NGOOD) = IHEL
C   NN                 ENDIF
C   NN               ENDIF
C   NN            ENDDO
C   NN            JHEL = 1
C   NN            ISUM_HEL=MIN(ISUM_HEL,NGOOD)
C   NN        ELSE              !RANDOM HELICITY
C   NN            DO J=1,ISUM_HEL
C   NN                JHEL=JHEL+1
C   NN                IF (JHEL .GT. NGOOD) JHEL=1
C   NN                HWGT = REAL(NGOOD)/REAL(ISUM_HEL)
C   NN                IHEL = IGOOD(JHEL)
C   NN                T=MATRIX(P ,NHEL(1,IHEL),JC(1))            
C   NN                DO JJ=1,nincoming
C   NN                  IF(POL(JJ).NE.1d0.AND.
C   NN       &             NHEL(JJ,IHEL).EQ.INT(SIGN(1d0,POL(JJ)))) THEN
C   NN                    T=T*ABS(POL(JJ))
C   NN                  ELSE IF(POL(JJ).NE.1d0)THEN
C   NN                    T=T*(2d0-ABS(POL(JJ)))
C   NN                  ENDIF
C   NN                ENDDO
C   NN                ANS(IPROC)=ANS(IPROC)+T*HWGT
C   NN            ENDDO
C   NN            IF (ISUM_HEL .EQ. 1) THEN
C   NN                WRITE(HEL_BUFF,'(16i5)')(NHEL(i,IHEL),i=1,6)
C   NN            ENDIF
C   NN        ENDIF
C   NN        IF (MULTI_CHANNEL) THEN
C   NN            XTOT=0D0
C   NN            DO IHEL=1,MAPCONFIG(0)
C   NN                XTOT=XTOT+AMP2(MAPCONFIG(IHEL))
C   NN            ENDDO
C   NN            IF (XTOT.NE.0D0) THEN
C   NN                ANS(IPROC)=ANS(IPROC)*AMP2(MAPCONFIG(ICONFIG))/XTOT
C   NN            ELSE
C   NN                ANS(IPROC)=0D0
C   NN            ENDIF
C   NN        ENDIF
C   NN        ANS(IPROC)=ANS(IPROC)/DBLE(IDEN(IPROC))
C   NN        ENDDO
      END
       
       
      REAL*8 FUNCTION WmJJ(P,MW,NHEL)
C  
C Generated by MadGraph II                                              
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,6)
C  
C FOR PROCESS : g d -> e- ve~ u g  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS,    NEIGEN 
      PARAMETER (NGRAPHS=   8,NEIGEN=  2) 
C   NN         include "genps.inc"
C   NN         include "6.inc"
C   NN         include "maxamps.inc"
      INTEGER    NWAVEFUNCS     , NCOLOR
      PARAMETER (NWAVEFUNCS=  17, NCOLOR=   2) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C     ADDED MULTILINES BELOW
      INTEGER  maxamps
      double precision  Pi, Fourpi, Rt2, gfermi
      parameter( Pi = 3.14159265358979323846d0 )
      parameter( Fourpi = 4.0d0  * Pi )
      parameter( Rt2   = 1.414213562d0 )
      parameter( gfermi = 1.16639d-5 )
      parameter (maxamps=2500)
C     END ADDED MULTILINES BELOW
C  
C ARGUMENTS 
C  
      REAL*8 P(0:3,6)
C     Added single line below
      REAL*8 MH, MW
      INTEGER NHEL(6), IC(6)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,J
      COMPLEX*16 ZTEMP
      REAL*8 DENOM(NCOLOR), CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NGRAPHS), JAMP(NCOLOR)
      COMPLEX*16 W(18,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
C  
      Double Precision amp2(maxamps), jamp2(0:maxamps)
      common/to_amps/  amp2,       jamp2
C     NN      include "coupl.inc"
C  
C COLOR DATA
C  
      DATA Denom(1  )/            3/                                       
      DATA (CF(i,1  ),i=1  ,2  ) /    16,   -2/                            
C               T[ 5, 2, 1, 6]                                             
      DATA Denom(2  )/            3/                                       
      DATA (CF(i,2  ),i=1  ,2  ) /    -2,   16/                            
C               T[ 5, 2, 6, 1]                                             
C ----------
C BEGIN CODE
C ----------
C     Added multi lines below
      double precision beamEnergy,bMass,cMass,wMass,wWidth,zMass,topMass
      double precision sin2w,alpha,ee2,ee,tgwf,tgg,alphas,tsgg,sw,cw
      double precision ez,ey,gzu1,gzu2,gzd1,gzd2,gwwz,v,gwwh,ghbot,gh
      double complex gwf(2)
      double complex gg(2)
      double complex g(2)

      beamEnergy = 3500
      bMass = 4.7
      cMass = 1.42
      wMass = 80.419
      wWidth = 2.04759
      tgwf = -0.461905
      tgg = 1.2633
      tsgg = 1.22286

      gwf(1) = dcmplx(tgwf, Zero)
      gwf(2) = dcmplx(Zero, Zero)
      gg(1) = dcmplx(tgg, Zero)
      gg(2) = dcmplx(Zero, Zero)
      g(1) = dcmplx(tsgg, Zero)
      g(2) = dcmplx(Zero, Zero)


      CALL VXXXXX(P(0,1   ),ZERO ,NHEL(1   ),-1,W(1,1   ))        
      CALL IXXXXX(P(0,2   ),ZERO ,NHEL(2   ),+1,W(1,2   ))        
      CALL OXXXXX(P(0,3   ),ZERO ,NHEL(3   ),+1,W(1,3   ))        
      CALL IXXXXX(P(0,4   ),ZERO ,NHEL(4   ),-1,W(1,4   ))        
      CALL OXXXXX(P(0,5   ),ZERO ,NHEL(5   ),+1,W(1,5   ))        
      CALL VXXXXX(P(0,6   ),ZERO ,NHEL(6   ),+1,W(1,6   ))        
      CALL JIOXXX(W(1,4   ),W(1,3   ),GWF ,WMASS   ,WWIDTH  ,W(1,7   ))    
      CALL FVIXXX(W(1,2   ),W(1,7   ),GWF ,ZERO    ,ZERO    ,W(1,8   ))    
      CALL JIOXXX(W(1,8   ),W(1,5   ),GG ,ZERO    ,ZERO    ,W(1,9   ))     
      CALL VVVXXX(W(1,6   ),W(1,1   ),W(1,9   ),G ,AMP(1   ))              
      CALL FVOXXX(W(1,5   ),W(1,1   ),GG ,ZERO    ,ZERO    ,W(1,10  ))     
      CALL FVOXXX(W(1,10  ),W(1,7   ),GWF ,ZERO    ,ZERO    ,W(1,11  ))    
      CALL IOVXXX(W(1,2   ),W(1,11  ),W(1,6   ),GG ,AMP(2   ))             
      CALL FVIXXX(W(1,8   ),W(1,1   ),GG ,ZERO    ,ZERO    ,W(1,12  ))     
      CALL IOVXXX(W(1,12  ),W(1,5   ),W(1,6   ),GG ,AMP(3   ))             
      CALL IOVXXX(W(1,8   ),W(1,10  ),W(1,6   ),GG ,AMP(4   ))             
      CALL FVOXXX(W(1,5   ),W(1,7   ),GWF ,ZERO    ,ZERO    ,W(1,13  ))    
      CALL JIOXXX(W(1,2   ),W(1,13  ),GG ,ZERO    ,ZERO    ,W(1,14  ))     
      CALL VVVXXX(W(1,6   ),W(1,1   ),W(1,14  ),G ,AMP(5   ))              
      CALL FVOXXX(W(1,13  ),W(1,1   ),GG ,ZERO    ,ZERO    ,W(1,15  ))     
      CALL IOVXXX(W(1,2   ),W(1,15  ),W(1,6   ),GG ,AMP(6   ))             
      CALL FVIXXX(W(1,2   ),W(1,1   ),GG ,ZERO    ,ZERO    ,W(1,16  ))     
      CALL FVIXXX(W(1,16  ),W(1,7   ),GWF ,ZERO    ,ZERO    ,W(1,17  ))    
      CALL IOVXXX(W(1,17  ),W(1,5   ),W(1,6   ),GG ,AMP(7   ))             
      CALL IOVXXX(W(1,16  ),W(1,13  ),W(1,6   ),GG ,AMP(8   ))             
      JAMP(   1) = +AMP(   1)-AMP(   2)-AMP(   4)+AMP(   5)-AMP(   6)
      JAMP(   2) = -AMP(   1)-AMP(   3)-AMP(   5)-AMP(   7)-AMP(   8)
      WmJJ = 0.D0 
      DO I = 1, NCOLOR
          ZTEMP = (0.D0,0.D0)
          DO J = 1, NCOLOR
              ZTEMP = ZTEMP + CF(J,I)*JAMP(J)
          ENDDO
          WmJJ =WmJJ+ZTEMP*DCONJG(JAMP(I))/DENOM(I)   
      ENDDO
      Do I = 1, NGRAPHS
          amp2(i)=amp2(i)+amp(i)*dconjg(amp(i))
      Enddo
      Do I = 1, NCOLOR
          Jamp2(i)=Jamp2(i)+Jamp(i)*dconjg(Jamp(i))
      Enddo
C      CALL GAUGECHECK(JAMP,ZTEMP,EIGEN_VEC,EIGEN_VAL,NCOLOR,NEIGEN) 
      END
       

      SUBROUTINE WmJJAltM(P1,MW,ANS)
C  
C Generated by MadGraph II                                              
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C AND HELICITIES
C FOR THE POINT IN PHASE SPACE P(0:3,6)
C  
C FOR PROCESS : d g -> e- ve~ u g  
C  
C Crossing   1 is d g -> e- ve~ u g  
      IMPLICIT NONE
C  
C CONSTANTS
C  
C     NN       Include "genps.inc"
C     NN       Include "nexternal.inc"
C     NN       Include "maxamps.inc"
      INTEGER                 NCOMB,     NCROSS         
      PARAMETER (             NCOMB=  64, NCROSS=  1)
C     NN       INTEGER    THEL
C     NN       PARAMETER (THEL=NCOMB*NCROSS)
C  
C ARGUMENTS 
C  
      REAL*8 P1(0:3,6),ANS(NCROSS)
C  
C LOCAL VARIABLES 
C  
      INTEGER NHEL(6,NCOMB),NTRY
      REAL*8 T, P(0:3,6)
CCC   Explicitly add MW, WpJJ
      REAL*8 MW
      REAL*8 WmJJAlt
      INTEGER IHEL,IDEN(NCROSS),IC(6,NCROSS)
      INTEGER IPROC,JC(6), I
      LOGICAL GOODHEL(NCOMB,NCROSS)
      INTEGER NGRAPHS
C NN      REAL*8 hwgt, xtot, xtry, xrej, xr, yfrac(0:ncomb)
C NN      INTEGER idum, ngood, igood(ncomb), jhel, j, jj
C NN      LOGICAL warned
C NN      REAL     xran1
C NN      EXTERNAL xran1
C  
C GLOBAL VARIABLES
C  
C NN      Double Precision amp2(maxamps), jamp2(0:maxamps)
C NN      common/to_amps/  amp2,       jamp2
C NN
C NN      character*79         hel_buff
C NN      common/to_helicity/  hel_buff
C NN
C NN      REAL*8 POL(2)
C NN      common/to_polarization/ POL
C NN
C NN      integer          isum_hel
C NN      logical                    multi_channel
C NN      common/to_matrix/isum_hel, multi_channel
C NN      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
C NN      common/to_mconfigs/mapconfig, iconfig
C NN      DATA NTRY,IDUM /0,-1/
C NN      DATA xtry, xrej, ngood /0,0,0/
C NN      DATA warned, isum_hel/.false.,0/
C NN      DATA multi_channel/.true./
C NN      SAVE yfrac, igood, jhel
C NN      DATA NGRAPHS /    8/          
C NN      DATA jamp2(0) /   2/          
C NN      DATA GOODHEL/THEL*.FALSE./
      DATA (NHEL(IHEL,   1),IHEL=1, 6) /-1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,   2),IHEL=1, 6) /-1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,   3),IHEL=1, 6) /-1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,   4),IHEL=1, 6) /-1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,   5),IHEL=1, 6) /-1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,   6),IHEL=1, 6) /-1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,   7),IHEL=1, 6) /-1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,   8),IHEL=1, 6) /-1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,   9),IHEL=1, 6) /-1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  10),IHEL=1, 6) /-1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  11),IHEL=1, 6) /-1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  12),IHEL=1, 6) /-1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  13),IHEL=1, 6) /-1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  14),IHEL=1, 6) /-1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  15),IHEL=1, 6) /-1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  16),IHEL=1, 6) /-1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  17),IHEL=1, 6) /-1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  18),IHEL=1, 6) /-1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  19),IHEL=1, 6) /-1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  20),IHEL=1, 6) /-1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  21),IHEL=1, 6) /-1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  22),IHEL=1, 6) /-1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  23),IHEL=1, 6) /-1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  24),IHEL=1, 6) /-1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  25),IHEL=1, 6) /-1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  26),IHEL=1, 6) /-1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  27),IHEL=1, 6) /-1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  28),IHEL=1, 6) /-1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  29),IHEL=1, 6) /-1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  30),IHEL=1, 6) /-1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  31),IHEL=1, 6) /-1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  32),IHEL=1, 6) /-1, 1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  33),IHEL=1, 6) / 1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  34),IHEL=1, 6) / 1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  35),IHEL=1, 6) / 1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  36),IHEL=1, 6) / 1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  37),IHEL=1, 6) / 1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  38),IHEL=1, 6) / 1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  39),IHEL=1, 6) / 1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  40),IHEL=1, 6) / 1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  41),IHEL=1, 6) / 1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  42),IHEL=1, 6) / 1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  43),IHEL=1, 6) / 1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  44),IHEL=1, 6) / 1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  45),IHEL=1, 6) / 1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  46),IHEL=1, 6) / 1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  47),IHEL=1, 6) / 1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  48),IHEL=1, 6) / 1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  49),IHEL=1, 6) / 1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  50),IHEL=1, 6) / 1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  51),IHEL=1, 6) / 1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  52),IHEL=1, 6) / 1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  53),IHEL=1, 6) / 1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  54),IHEL=1, 6) / 1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  55),IHEL=1, 6) / 1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  56),IHEL=1, 6) / 1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  57),IHEL=1, 6) / 1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  58),IHEL=1, 6) / 1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  59),IHEL=1, 6) / 1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  60),IHEL=1, 6) / 1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  61),IHEL=1, 6) / 1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  62),IHEL=1, 6) / 1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  63),IHEL=1, 6) / 1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  64),IHEL=1, 6) / 1, 1, 1, 1, 1, 1/
      DATA (  IC(IHEL,  1),IHEL=1, 6) / 1, 2, 3, 4, 5, 6/
      DATA (IDEN(IHEL),IHEL=  1,  1) /  96/
C ----------
C BEGIN CODE
C ----------
C     ADDED ALL THESE LINES
      ANS(1) = 0D0
      PRINT *,"STARTING NCOMB=",NCOMB
      DO IHEL=1,NCOMB
        T= WmJJAlt(P1 ,MW,NHEL(1,IHEL))		
        ANS(1)=ANS(1)+T
C        PRINT *,"IHEL= ", IHEL," T= ",T," ME=",ANS(1)," IDEN(1)= "
        IF (T .GT. 0) THEN 
           PRINT *," IHEL= ", IHEL," T= ",T," ME=",ANS(1)," IDEN(1)= ",
     & DBLE(IDEN(1))
	ENDIF
      ENDDO
      
      ANS(1)=ANS(1)/DBLE(IDEN(1))
C     END ADDED ALL THESE LINES

C NN       NTRY=NTRY+1
C NN       DO IPROC=1,NCROSS
C NN       CALL SWITCHMOM(P1,P,IC(1,IPROC),JC,6)
C NN       DO IHEL=1,6
C NN          JC(IHEL) = +1
C NN       ENDDO
C NN        
C NN       IF (multi_channel) THEN
C NN           DO IHEL=1,NGRAPHS
C NN               amp2(ihel)=0d0
C NN               jamp2(ihel)=0d0
C NN           ENDDO
C NN           DO IHEL=1,int(jamp2(0))
C NN               jamp2(ihel)=0d0
C NN           ENDDO
C NN       ENDIF
C NN       ANS(IPROC) = 0D0
C NN       write(hel_buff,'(16i5)') (0,i=1,nexternal)
C NN       IF (ISUM_HEL .EQ. 0 .OR. NTRY .LT. 10) THEN
C NN           DO IHEL=1,NCOMB
C NN              IF (GOODHEL(IHEL,IPROC) .OR. NTRY .LT. 2) THEN
C NN                  T=WmJJAlt(P ,NHEL(1,IHEL),JC(1))            
C NN                DO JJ=1,nincoming
C NN                  IF(POL(JJ).NE.1d0.AND.
C NN      &              NHEL(JJ,IHEL).EQ.INT(SIGN(1d0,POL(JJ)))) THEN
C NN                    T=T*ABS(POL(JJ))
C NN                  ELSE IF(POL(JJ).NE.1d0)THEN
C NN                    T=T*(2d0-ABS(POL(JJ)))
C NN                  ENDIF
C NN                ENDDO
C NN                ANS(IPROC)=ANS(IPROC)+T
C NN                IF (T .NE. 0D0 .AND. .NOT.    GOODHEL(IHEL,IPROC)) THEN
C NN                    GOODHEL(IHEL,IPROC)=.TRUE.
C NN                    NGOOD = NGOOD +1
C NN                    IGOOD(NGOOD) = IHEL
C NN                ENDIF
C NN              ENDIF
C NN           ENDDO
C NN           JHEL = 1
C NN           ISUM_HEL=MIN(ISUM_HEL,NGOOD)
C NN       ELSE              !RANDOM HELICITY
C NN           DO J=1,ISUM_HEL
C NN               JHEL=JHEL+1
C NN               IF (JHEL .GT. NGOOD) JHEL=1
C NN               HWGT = REAL(NGOOD)/REAL(ISUM_HEL)
C NN               IHEL = IGOOD(JHEL)
C NN               T=WmJJAlt(P ,NHEL(1,IHEL),JC(1))            
C NN               DO JJ=1,nincoming
C NN                 IF(POL(JJ).NE.1d0.AND.
C NN      &             NHEL(JJ,IHEL).EQ.INT(SIGN(1d0,POL(JJ)))) THEN
C NN                   T=T*ABS(POL(JJ))
C NN                 ELSE IF(POL(JJ).NE.1d0)THEN
C NN                   T=T*(2d0-ABS(POL(JJ)))
C NN                 ENDIF
C NN               ENDDO
C NN               ANS(IPROC)=ANS(IPROC)+T*HWGT
C NN           ENDDO
C NN           IF (ISUM_HEL .EQ. 1) THEN
C NN               WRITE(HEL_BUFF,'(16i5)')(NHEL(i,IHEL),i=1,nexternal)
C NN           ENDIF
C NN       ENDIF
C NN       IF (MULTI_CHANNEL) THEN
C NN           XTOT=0D0
C NN           DO IHEL=1,MAPCONFIG(0)
C NN               XTOT=XTOT+AMP2(MAPCONFIG(IHEL))
C NN           ENDDO
C NN           IF (XTOT.NE.0D0) THEN
C NN               ANS(IPROC)=ANS(IPROC)*AMP2(MAPCONFIG(ICONFIG))/XTOT
C NN           ELSE
C NN               ANS(IPROC)=0D0
C NN           ENDIF
C NN       ENDIF
C NN       ANS(IPROC)=ANS(IPROC)/DBLE(IDEN(IPROC))
C NN       ENDDO
      END
       
CCC   Remove IC and add MW         
      REAL*8 FUNCTION WmJJAlt(P,MW,NHEL)
C  
C Generated by MadGraph II                                              
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,6)
C  
C FOR PROCESS : d g -> e- ve~ u g  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS,    NEIGEN 
      PARAMETER (NGRAPHS=   8,NEIGEN=  2) 
C     NN      include "genps.inc"
C     NN       include "nexternal.inc"
C     NN       include "maxamps.inc"
      INTEGER    NWAVEFUNCS     , NCOLOR
      PARAMETER (NWAVEFUNCS=  17, NCOLOR=   2) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C     ADDED MULTILINES BELOW
      INTEGER  maxamps
      double precision  Pi, Fourpi, Rt2, gfermi
      parameter( Pi = 3.14159265358979323846d0 )
      parameter( Fourpi = 4.0d0  * Pi )
      parameter( Rt2   = 1.414213562d0 )
      parameter( gfermi = 1.16639d-5 )
      parameter (maxamps=2500)
C     END ADDED MULTILINES BELOW
C  
C ARGUMENTS 
C  
      REAL*8 P(0:3,6)
C     Added single line below
      REAL*8 MH, MW
      INTEGER NHEL(6), IC(6)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,J
      COMPLEX*16 ZTEMP
      REAL*8 DENOM(NCOLOR), CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NGRAPHS), JAMP(NCOLOR)
      COMPLEX*16 W(18,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
C  
      Double Precision amp2(maxamps), jamp2(0:maxamps)
      common/to_amps/  amp2,       jamp2
C     NN       include "coupl.inc"
C  
C COLOR DATA
C  
      DATA Denom(1  )/            3/                                       
      DATA (CF(i,1  ),i=1  ,2  ) /    16,   -2/                            
C               T[ 5, 1, 2, 6]                                             
      DATA Denom(2  )/            3/                                       
      DATA (CF(i,2  ),i=1  ,2  ) /    -2,   16/                            
C               T[ 5, 1, 6, 2]                                             
C ----------
C BEGIN CODE
C ----------
C     Added multi lines below
      double precision beamEnergy,bMass,cMass,wMass,wWidth,zMass,topMass
      double precision sin2w,alpha,ee2,ee,tgwf,tgg,alphas,tsgg,sw,cw
      double precision ez,ey,gzu1,gzu2,gzd1,gzd2,gwwz,v,gwwh,ghbot,gh
      double complex gwf(2)
      double complex gg(2)
      double complex g(2)

      beamEnergy = 3500
      bMass = 4.7
      cMass = 1.42
      wMass = 80.419
      wWidth = 2.04759
      tgwf = -0.461905
      tgg = 1.2633
      tsgg = 1.22286
      gwf(1) = dcmplx(tgwf, Zero)
      gwf(2) = dcmplx(Zero, Zero)
      gg(1) = dcmplx(tgg, Zero)
      gg(2) = dcmplx(Zero, Zero)
      g(1) = dcmplx(tsgg, Zero)
      g(2) = dcmplx(Zero, Zero)

C  Remove the IC
      CALL IXXXXX(P(0,1   ),ZERO ,NHEL(1   ),+1,W(1,1   ))        
      CALL VXXXXX(P(0,2   ),ZERO ,NHEL(2   ),-1,W(1,2   ))        
      CALL OXXXXX(P(0,3   ),ZERO ,NHEL(3   ),+1,W(1,3   ))        
      CALL IXXXXX(P(0,4   ),ZERO ,NHEL(4   ),-1,W(1,4   ))        
      CALL OXXXXX(P(0,5   ),ZERO ,NHEL(5   ),+1,W(1,5   ))        
      CALL VXXXXX(P(0,6   ),ZERO ,NHEL(6   ),+1,W(1,6   ))        
      CALL JIOXXX(W(1,4   ),W(1,3   ),GWF ,WMASS   ,WWIDTH  ,W(1,7   ))    
      CALL FVOXXX(W(1,5   ),W(1,2   ),GG ,ZERO    ,ZERO    ,W(1,8   ))     
      CALL FVOXXX(W(1,8   ),W(1,7   ),GWF ,ZERO    ,ZERO    ,W(1,9   ))    
      CALL IOVXXX(W(1,1   ),W(1,9   ),W(1,6   ),GG ,AMP(1   ))             
      CALL FVIXXX(W(1,1   ),W(1,7   ),GWF ,ZERO    ,ZERO    ,W(1,10  ))    
      CALL JIOXXX(W(1,10  ),W(1,5   ),GG ,ZERO    ,ZERO    ,W(1,11  ))     
      CALL VVVXXX(W(1,6   ),W(1,2   ),W(1,11  ),G ,AMP(2   ))              
      CALL FVIXXX(W(1,10  ),W(1,2   ),GG ,ZERO    ,ZERO    ,W(1,12  ))     
      CALL IOVXXX(W(1,12  ),W(1,5   ),W(1,6   ),GG ,AMP(3   ))             
      CALL IOVXXX(W(1,10  ),W(1,8   ),W(1,6   ),GG ,AMP(4   ))             
      CALL FVOXXX(W(1,5   ),W(1,7   ),GWF ,ZERO    ,ZERO    ,W(1,13  ))    
      CALL FVOXXX(W(1,13  ),W(1,2   ),GG ,ZERO    ,ZERO    ,W(1,14  ))     
      CALL IOVXXX(W(1,1   ),W(1,14  ),W(1,6   ),GG ,AMP(5   ))             
      CALL JIOXXX(W(1,1   ),W(1,13  ),GG ,ZERO    ,ZERO    ,W(1,15  ))     
      CALL VVVXXX(W(1,6   ),W(1,2   ),W(1,15  ),G ,AMP(6   ))              
      CALL FVIXXX(W(1,1   ),W(1,2   ),GG ,ZERO    ,ZERO    ,W(1,16  ))     
      CALL FVIXXX(W(1,16  ),W(1,7   ),GWF ,ZERO    ,ZERO    ,W(1,17  ))    
      CALL IOVXXX(W(1,17  ),W(1,5   ),W(1,6   ),GG ,AMP(7   ))             
      CALL IOVXXX(W(1,16  ),W(1,13  ),W(1,6   ),GG ,AMP(8   ))             
      JAMP(   1) = -AMP(   1)+AMP(   2)-AMP(   4)-AMP(   5)+AMP(   6)
      JAMP(   2) = -AMP(   2)-AMP(   3)-AMP(   6)-AMP(   7)-AMP(   8)
      WmJJAlt = 0.D0 
      DO I = 1, NCOLOR
          ZTEMP = (0.D0,0.D0)
          DO J = 1, NCOLOR
              ZTEMP = ZTEMP + CF(J,I)*JAMP(J)
          ENDDO
          WmJJAlt =WmJJAlt+ZTEMP*DCONJG(JAMP(I))/DENOM(I)   
      ENDDO
      Do I = 1, NGRAPHS
          amp2(i)=amp2(i)+amp(i)*dconjg(amp(i))
      Enddo
      Do I = 1, NCOLOR
          Jamp2(i)=Jamp2(i)+Jamp(i)*dconjg(Jamp(i))
      Enddo
C      CALL GAUGECHECK(JAMP,ZTEMP,EIGEN_VEC,EIGEN_VAL,NCOLOR,NEIGEN) 
      END
       





C Add MW
      SUBROUTINE WpJJM(P1,MW,ANS)
C  
C Generated by MadGraph II                                              
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C AND HELICITIES
C FOR THE POINT IN PHASE SPACE P(0:3,NEXTERNAL)
C  
C FOR PROCESS : g u -> e+ ve d g  
C  
C Crossing   1 is g u -> e+ ve d g  
      IMPLICIT NONE
C  
C CONSTANTS
C  
C     NN   Include "genps.inc"
C     NN        Include "nexternal.inc"
C     NN        Include "maxamps.inc"
      INTEGER                 NCOMB,     NCROSS         
      PARAMETER (             NCOMB=  64, NCROSS=  1)
C     NN        INTEGER    THEL
C     NN        PARAMETER (THEL=NCOMB*NCROSS)
C  
C ARGUMENTS 
C  
      REAL*8 P1(0:3,6),ANS(NCROSS)
C  
C LOCAL VARIABLES 
C  
      INTEGER NHEL(6,NCOMB),NTRY
      REAL*8 T, P(0:3,6)
CCC   Explicitly add MW, WpJJ
      REAL*8 MW
      REAL*8 WpJJ
      INTEGER IHEL,IDEN(NCROSS),IC(6,NCROSS)
      INTEGER IPROC,JC(6), I
      LOGICAL GOODHEL(NCOMB,NCROSS)
      INTEGER NGRAPHS
C     NN       REAL*8 hwgt, xtot, xtry, xrej, xr, yfrac(0:ncomb)
C     NN       INTEGER idum, ngood, igood(ncomb), jhel, j, jj
C     NN       LOGICAL warned
C     NN       REAL     xran1
C     NN       EXTERNAL xran1
C  
C GLOBAL VARIABLES
C  
C    NN        Double Precision amp2(maxamps), jamp2(0:maxamps)
C    NN        common/to_amps/  amp2,       jamp2
C    NN  
C    NN        character*79         hel_buff
C    NN        common/to_helicity/  hel_buff
C    NN  
C    NN        REAL*8 POL(2)
C    NN        common/to_polarization/ POL
C    NN  
C    NN        integer          isum_hel
C    NN        logical                    multi_channel
C    NN        common/to_matrix/isum_hel, multi_channel
C    NN        INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
C    NN        common/to_mconfigs/mapconfig, iconfig
C    NN        DATA NTRY,IDUM /0,-1/
C    NN        DATA xtry, xrej, ngood /0,0,0/
C    NN        DATA warned, isum_hel/.false.,0/
C    NN        DATA multi_channel/.true./
C    NN        SAVE yfrac, igood, jhel
C    NN        DATA NGRAPHS /    8/          
C    NN        DATA jamp2(0) /   2/          
C    NN        DATA GOODHEL/THEL*.FALSE./
      DATA (NHEL(IHEL,   1),IHEL=1, 6) /-1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,   2),IHEL=1, 6) /-1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,   3),IHEL=1, 6) /-1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,   4),IHEL=1, 6) /-1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,   5),IHEL=1, 6) /-1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,   6),IHEL=1, 6) /-1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,   7),IHEL=1, 6) /-1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,   8),IHEL=1, 6) /-1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,   9),IHEL=1, 6) /-1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  10),IHEL=1, 6) /-1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  11),IHEL=1, 6) /-1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  12),IHEL=1, 6) /-1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  13),IHEL=1, 6) /-1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  14),IHEL=1, 6) /-1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  15),IHEL=1, 6) /-1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  16),IHEL=1, 6) /-1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  17),IHEL=1, 6) /-1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  18),IHEL=1, 6) /-1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  19),IHEL=1, 6) /-1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  20),IHEL=1, 6) /-1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  21),IHEL=1, 6) /-1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  22),IHEL=1, 6) /-1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  23),IHEL=1, 6) /-1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  24),IHEL=1, 6) /-1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  25),IHEL=1, 6) /-1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  26),IHEL=1, 6) /-1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  27),IHEL=1, 6) /-1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  28),IHEL=1, 6) /-1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  29),IHEL=1, 6) /-1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  30),IHEL=1, 6) /-1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  31),IHEL=1, 6) /-1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  32),IHEL=1, 6) /-1, 1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  33),IHEL=1, 6) / 1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  34),IHEL=1, 6) / 1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  35),IHEL=1, 6) / 1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  36),IHEL=1, 6) / 1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  37),IHEL=1, 6) / 1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  38),IHEL=1, 6) / 1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  39),IHEL=1, 6) / 1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  40),IHEL=1, 6) / 1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  41),IHEL=1, 6) / 1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  42),IHEL=1, 6) / 1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  43),IHEL=1, 6) / 1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  44),IHEL=1, 6) / 1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  45),IHEL=1, 6) / 1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  46),IHEL=1, 6) / 1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  47),IHEL=1, 6) / 1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  48),IHEL=1, 6) / 1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  49),IHEL=1, 6) / 1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  50),IHEL=1, 6) / 1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  51),IHEL=1, 6) / 1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  52),IHEL=1, 6) / 1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  53),IHEL=1, 6) / 1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  54),IHEL=1, 6) / 1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  55),IHEL=1, 6) / 1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  56),IHEL=1, 6) / 1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  57),IHEL=1, 6) / 1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  58),IHEL=1, 6) / 1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  59),IHEL=1, 6) / 1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  60),IHEL=1, 6) / 1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  61),IHEL=1, 6) / 1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  62),IHEL=1, 6) / 1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  63),IHEL=1, 6) / 1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  64),IHEL=1, 6) / 1, 1, 1, 1, 1, 1/
      DATA (  IC(IHEL,  1),IHEL=1, 6) / 1, 2, 3, 4, 5, 6/
      DATA (IDEN(IHEL),IHEL=  1,  1) /  96/
C ----------
C BEGIN CODE
C ----------
C     ADDED ALL THESE LINES
      ANS(1) = 0D0
      PRINT *,"STARTING NCOMB=",NCOMB
      DO IHEL=1,NCOMB
        T= WpJJ(P1 ,MW,NHEL(1,IHEL))		
        ANS(1)=ANS(1)+T
C        PRINT *,"IHEL= ", IHEL," T= ",T," ME=",ANS(1)," IDEN(1)= "
        IF (T .GT. 0) THEN 
           PRINT *," IHEL= ", IHEL," T= ",T," ME=",ANS(1)," IDEN(1)= ",
     & DBLE(IDEN(1))
	ENDIF
      ENDDO
      
      ANS(1)=ANS(1)/DBLE(IDEN(1))
C     END ADDED ALL THESE LINES

C     NN         NTRY=NTRY+1
C     NN         DO IPROC=1,NCROSS
C     NN         CALL SWITCHMOM(P1,P,IC(1,IPROC),JC,NEXTERNAL)
C     NN         DO IHEL=1,NEXTERNAL
C     NN            JC(IHEL) = +1
C     NN         ENDDO
C     NN          
C     NN         IF (multi_channel) THEN
C     NN             DO IHEL=1,NGRAPHS
C     NN                 amp2(ihel)=0d0
C     NN                 jamp2(ihel)=0d0
C     NN             ENDDO
C     NN             DO IHEL=1,int(jamp2(0))
C     NN                 jamp2(ihel)=0d0
C     NN             ENDDO
C     NN         ENDIF
C     NN         ANS(IPROC) = 0D0
C     NN         write(hel_buff,'(16i5)') (0,i=1,nexternal)
C     NN         IF (ISUM_HEL .EQ. 0 .OR. NTRY .LT. 10) THEN
C     NN             DO IHEL=1,NCOMB
C     NN                IF (GOODHEL(IHEL,IPROC) .OR. NTRY .LT. 2) THEN
C     NN                    T=MATRIX(P ,NHEL(1,IHEL),JC(1))            
C     NN                  DO JJ=1,nincoming
C     NN                    IF(POL(JJ).NE.1d0.AND.
C     NN        &              NHEL(JJ,IHEL).EQ.INT(SIGN(1d0,POL(JJ)))) THEN
C     NN                      T=T*ABS(POL(JJ))
C     NN                    ELSE IF(POL(JJ).NE.1d0)THEN
C     NN                      T=T*(2d0-ABS(POL(JJ)))
C     NN                    ENDIF
C     NN                  ENDDO
C     NN                  ANS(IPROC)=ANS(IPROC)+T
C     NN                  IF (T .NE. 0D0 .AND. .NOT.    GOODHEL(IHEL,IPROC)) THEN
C     NN                      GOODHEL(IHEL,IPROC)=.TRUE.
C     NN                      NGOOD = NGOOD +1
C     NN                      IGOOD(NGOOD) = IHEL
C     NN                  ENDIF
C     NN                ENDIF
C     NN             ENDDO
C     NN             JHEL = 1
C     NN             ISUM_HEL=MIN(ISUM_HEL,NGOOD)
C     NN         ELSE              !RANDOM HELICITY
C     NN             DO J=1,ISUM_HEL
C     NN                 JHEL=JHEL+1
C     NN                 IF (JHEL .GT. NGOOD) JHEL=1
C     NN                 HWGT = REAL(NGOOD)/REAL(ISUM_HEL)
C     NN                 IHEL = IGOOD(JHEL)
C     NN                 T=MATRIX(P ,NHEL(1,IHEL),JC(1))            
C     NN                 DO JJ=1,nincoming
C     NN                   IF(POL(JJ).NE.1d0.AND.
C     NN        &             NHEL(JJ,IHEL).EQ.INT(SIGN(1d0,POL(JJ)))) THEN
C     NN                     T=T*ABS(POL(JJ))
C     NN                   ELSE IF(POL(JJ).NE.1d0)THEN
C     NN                     T=T*(2d0-ABS(POL(JJ)))
C     NN                   ENDIF
C     NN                 ENDDO
C     NN                 ANS(IPROC)=ANS(IPROC)+T*HWGT
C     NN             ENDDO
C     NN             IF (ISUM_HEL .EQ. 1) THEN
C     NN                 WRITE(HEL_BUFF,'(16i5)')(NHEL(i,IHEL),i=1,nexternal)
C     NN             ENDIF
C     NN         ENDIF
C     NN         IF (MULTI_CHANNEL) THEN
C     NN             XTOT=0D0
C     NN             DO IHEL=1,MAPCONFIG(0)
C     NN                 XTOT=XTOT+AMP2(MAPCONFIG(IHEL))
C     NN             ENDDO
C     NN             IF (XTOT.NE.0D0) THEN
C     NN                 ANS(IPROC)=ANS(IPROC)*AMP2(MAPCONFIG(ICONFIG))/XTOT
C     NN             ELSE
C     NN                 ANS(IPROC)=0D0
C     NN             ENDIF
C     NN         ENDIF
C     NN         ANS(IPROC)=ANS(IPROC)/DBLE(IDEN(IPROC))
C     NN         ENDDO
      END
       
CCC   Remove IC and add MW       
      REAL*8 FUNCTION WpJJ(P,MW,NHEL)
C  
C Generated by MadGraph II                                              
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : g u -> e+ ve d g  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS,    NEIGEN 
      PARAMETER (NGRAPHS=   8,NEIGEN=  2) 
C     NN        include "genps.inc"
C     NN         include "nexternal.inc"
C     NN         include "maxamps.inc"
      INTEGER    NWAVEFUNCS     , NCOLOR
      PARAMETER (NWAVEFUNCS=  17, NCOLOR=   2) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C     ADDED MULTILINES BELOW
      INTEGER  maxamps
      double precision  Pi, Fourpi, Rt2, gfermi
      parameter( Pi = 3.14159265358979323846d0 )
      parameter( Fourpi = 4.0d0  * Pi )
      parameter( Rt2   = 1.414213562d0 )
      parameter( gfermi = 1.16639d-5 )
      parameter (maxamps=2500)
C     END ADDED MULTILINES BELOW
C  
C ARGUMENTS 
C  
      REAL*8 P(0:3,6)
C     Added single line below
      REAL*8 MH, MW
      INTEGER NHEL(6), IC(6)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,J,K
      COMPLEX*16 ZTEMP
      REAL*8 DENOM(NCOLOR), CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NGRAPHS), JAMP(NCOLOR)
      COMPLEX*16 W(18,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
C  
      Double Precision amp2(maxamps), jamp2(0:maxamps)
      common/to_amps/  amp2,       jamp2
C     NN      include "coupl.inc"
C  
C COLOR DATA
C  
      DATA Denom(1  )/            3/                                       
      DATA (CF(i,1  ),i=1  ,2  ) /    16,   -2/                            
C               T[ 5, 2, 1, 6]                                             
      DATA Denom(2  )/            3/                                       
      DATA (CF(i,2  ),i=1  ,2  ) /    -2,   16/                            
C               T[ 5, 2, 6, 1]  
C     Added multi lines below
      double precision beamEnergy,bMass,cMass,wMass,wWidth,zMass,topMass
      double precision sin2w,alpha,ee2,ee,tgwf,tgg,alphas,tsgg,sw,cw
      double precision ez,ey,gzu1,gzu2,gzd1,gzd2,gwwz,v,gwwh,ghbot,gh
      double complex gwf(2)
      double complex gg(2)
      double complex g(2)

      beamEnergy = 3500
      bMass = 4.7
      cMass = 1.42
      wMass = 80.419
      wWidth = 2.04759
      tgwf = -0.461905
      tgg = 1.2633
      tsgg = 1.22286

 


      gwf(1) = dcmplx(tgwf, Zero)
      gwf(2) = dcmplx(Zero, Zero)
      gg(1) = dcmplx(tgg, Zero)
      gg(2) = dcmplx(Zero, Zero)
      g(1) = dcmplx(tsgg, Zero)
      g(2) = dcmplx(Zero, Zero)


CC     Preserve for now
C      double precision  sin2w,sw,alpha,ee,ee2,gw,v,alphas
C      double precision  hmass,wmass,bmass,wwidth,hwidth,multi
C      double complex gwf(2), ghbot(2)
C      double complex gwwh   
C      double complex gg(2), gh(2), g(2)
C      hmass   = MH !higgs pole mass
C      wmass   = MW !W  pole mass mw=80.419d0
C      bmass   = 4.7d0    !bottom pole mass
C      wwidth  = 2.04759d0   
C      sin2w=0.23120 
C      sw  = sqrt( sin2w )
C      alpha  = Rt2*gfermi*wmass**2*sin2w/pi      
C      ee2 = alpha * Fourpi
C      ee  = sqrt( alpha * Fourpi ) 
C      gw   = ee/sw
CC      Two = 2.0d0 
C      gwf(1)  = dcmplx( -ee/sqrt(2.0d0*sin2w), Zero )
C      gwf(2)  = dcmplx(  Zero              , Zero )
C      v   = 2.0d0*wmass*sw/ee2   ! the wmass is used to calculate v
C      gwwh    = dcmplx( ee2/sin2w*0.5d0*v, Zero )
C      hwidth  = 3.7d-3  
C      multi = 100  
CC      hwidth  = multi*3*1.16639d-5*3.7*3.7*HMASS/(4*1.41421*3.1415927); 
CC      PRINT *," hwidth hmass",hwidth,hmass
C      ghbot(1) = dcmplx( -BMASS/v, Zero )
C      ghbot(2) = ghbot(1)
C
C      gg(1) = dcmplx(1.22286, 0.0)
C      gg(2) = dcmplx(0.0, 0.0)
C      gh(1) = dcmplx(0.00005, 0.0)
C      gh(2) = dcmplx(0.0, 0.0)
C      alphas = 0.119
CC      g=sqrt(Fourpi * alphas)
C      g(1)=dcmplx(Fourpi * alphas,0)
C      g(2)=dcmplx(Fourpi * alphas,0)

C T     hmass   = MH !higgs pole mass
C T     wmass   = MW !W  pole mass mw=80.419d0
C T     bmass   = 4.7d0    !bottom pole mass
C T     wwidth  = 2.04759d0   
C T     sin2w=0.23120 
C T     sw  = sqrt( sin2w )
C T     alpha  = Rt2*gfermi*wmass**2*sin2w/pi      
C T     ee2 = alpha * Fourpi
C T     ee  = sqrt( alpha * Fourpi ) 
C T     gw   = ee/sw
C T      Two = 2.0d0 
C T     gwf(1)  = dcmplx( -ee/sqrt(2.0d0*sin2w), Zero )
C T     gwf(2)  = dcmplx(  Zero              , Zero )
C T     v   = 2.0d0*wmass*sw/ee2   ! the wmass is used to calculate v
C T     gwwh    = dcmplx( ee2/sin2w*0.5d0*v, Zero )
C T      hwidth  = 3.7d-3  
C T     multi = 100  
C T     hwidth  = multi*3*1.16639d-5*3.7*3.7*HMASS/(4*1.41421*3.1415927); 
C T      PRINT *," hwidth hmass",hwidth,hmass
C T     ghbot(1) = dcmplx( -BMASS/v, Zero )
C T     ghbot(2) = ghbot(1)
C T
C T     gg(1) = dcmplx(1.22286, 0.0)
C T     gg(2) = dcmplx(1.22286, 0.0)
C T     gh(1) = dcmplx(0.00005, 0.0)
C T     gh(2) = dcmplx(0.0, 0.0)
C T     alphas = 0.119



C      g(1) = dcmplx(sqrt(Fourpi * alphas),0);
C      g(2) = dcmplx(sqrt(Fourpi * alphas),0);
C
C     END ADDED MULTILINES                                         
C3 ----------
C BEGIN CODE
C ----------
C  Remove the IC
      CALL VXXXXX(P(0,1   ),ZERO ,NHEL(1   ),-1,W(1,1   ))        
      CALL IXXXXX(P(0,2   ),ZERO ,NHEL(2   ),+1,W(1,2   ))        
      CALL IXXXXX(P(0,3   ),ZERO ,NHEL(3   ),-1,W(1,3   ))        
      CALL OXXXXX(P(0,4   ),ZERO ,NHEL(4   ),+1,W(1,4   ))        
      CALL OXXXXX(P(0,5   ),ZERO ,NHEL(5   ),+1,W(1,5   ))        
      CALL VXXXXX(P(0,6   ),ZERO ,NHEL(6   ),+1,W(1,6   ))        
      CALL JIOXXX(W(1,3   ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,7  ))    
      CALL FVIXXX(W(1,2   ),W(1,7   ),GWF ,ZERO    ,ZERO    ,W(1,8  ))    
      CALL JIOXXX(W(1,8   ),W(1,5   ),GG ,ZERO    ,ZERO    ,W(1,9   ))     
      CALL VVVXXX(W(1,6   ),W(1,1   ),W(1,9   ),g ,AMP(1   ))              
      CALL FVOXXX(W(1,5   ),W(1,1   ),GG ,ZERO    ,ZERO    ,W(1,10  ))     
      CALL FVOXXX(W(1,10  ),W(1,7   ),GWF ,ZERO    ,ZERO    ,W(1,11 ))    
      CALL IOVXXX(W(1,2   ),W(1,11  ),W(1,6   ),GG ,AMP(2   ))             
      CALL FVIXXX(W(1,8   ),W(1,1   ),GG ,ZERO    ,ZERO    ,W(1,12  ))     
      CALL IOVXXX(W(1,12  ),W(1,5   ),W(1,6   ),GG ,AMP(3   ))             
      CALL IOVXXX(W(1,8   ),W(1,10  ),W(1,6   ),GG ,AMP(4   ))             
      CALL FVOXXX(W(1,5   ),W(1,7   ),GWF ,ZERO    ,ZERO    ,W(1,13 ))    
      CALL JIOXXX(W(1,2   ),W(1,13  ),GG ,ZERO    ,ZERO    ,W(1,14  ))     
      CALL VVVXXX(W(1,6   ),W(1,1   ),W(1,14  ),g ,AMP(5   ))              
      CALL FVOXXX(W(1,13  ),W(1,1   ),GG ,ZERO    ,ZERO    ,W(1,15  ))     
      CALL IOVXXX(W(1,2   ),W(1,15  ),W(1,6   ),GG ,AMP(6   ))             
      CALL FVIXXX(W(1,2   ),W(1,1   ),GG ,ZERO    ,ZERO    ,W(1,16  ))     
      CALL FVIXXX(W(1,16  ),W(1,7   ),GWF ,ZERO    ,ZERO    ,W(1,17 ))    
      CALL IOVXXX(W(1,17  ),W(1,5   ),W(1,6   ),GG ,AMP(7   ))             
      CALL IOVXXX(W(1,16  ),W(1,13  ),W(1,6   ),GG ,AMP(8   ))   
     
      JAMP(   1) = -AMP(   1)+AMP(   2)+AMP(   4)-AMP(   5)+AMP(   6)
      JAMP(   2) = +AMP(   1)+AMP(   3)+AMP(   5)+AMP(   7)+AMP(   8)

C      JAMP(   1) = AMP(   5)
C      JAMP(   2) = ZERO



      WpJJ = 0.D0 
      DO I = 1, NCOLOR
C      DO I = 1, 1
          ZTEMP = (0.D0,0.D0)
          DO J = 1, NCOLOR
              ZTEMP = ZTEMP + CF(J,I)*JAMP(J)
          ENDDO
C          print *, "fortran 'amp'", ZTEMP*DCONJG(JAMP(I))/DENOM(I)
          WpJJ =WpJJ+ZTEMP*DCONJG(JAMP(I))/DENOM(I)   
      ENDDO
      Do I = 1, NGRAPHS
          amp2(i)=amp2(i)+amp(i)*dconjg(amp(i))
      Enddo
      Do I = 1, NCOLOR
          Jamp2(i)=Jamp2(i)+Jamp(i)*dconjg(Jamp(i))
      Enddo
C      If (WpJJ.ne.0) then
C      print *, 'helicityAmp5= ', Amp( 5)
C      print *, "Helicity:"
C      DO K = 1, 6
C         print *,NHel(K)
C      Enddo
C      Endif 


C      CALL GAUGECHECK(JAMP,ZTEMP,EIGEN_VEC,EIGEN_VAL,NCOLOR,NEIGEN) 
      END







       
       SUBROUTINE WpJJAltM(P1,MW,ANS)
C  
C Generated by MadGraph II                                              
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C AND HELICITIES
C FOR THE POINT IN PHASE SPACE P(0:3,6)
C  
C FOR PROCESS : u g -> e+ ve d g  
C  
C Crossing   1 is u g -> e+ ve d g  
      IMPLICIT NONE
C  
C CONSTANTS
C  
CN      Include "genps.inc"
CN       Include "nexternal.inc"
CN       Include "maxamps.inc"
      INTEGER                 NCOMB,     NCROSS         
      PARAMETER (             NCOMB=  64, NCROSS=  1)
CN       INTEGER    THEL
CN       PARAMETER (THEL=NCOMB*NCROSS)
C  
C ARGUMENTS 
C  
      REAL*8 P1(0:3,6),ANS(NCROSS)
C  
C LOCAL VARIABLES 
C  
      INTEGER NHEL(6,NCOMB),NTRY
      REAL*8 T, P(0:3,6)
CCC   Explicitly add MW, WpJJ
      REAL*8 MW
      REAL*8 WpJJAlt
      INTEGER IHEL,IDEN(NCROSS),IC(6,NCROSS)
      INTEGER IPROC,JC(6), I
      LOGICAL GOODHEL(NCOMB,NCROSS)
      INTEGER NGRAPHS
C   NN      REAL*8 hwgt, xtot, xtry, xrej, xr, yfrac(0:ncomb)
C   NN      INTEGER idum, ngood, igood(ncomb), jhel, j, jj
C   NN      LOGICAL warned
C   NN      REAL     xran1
C   NN      EXTERNAL xran1
C  
C GLOBAL VARIABLES
C  
C   NN      Double Precision amp2(maxamps), jamp2(0:maxamps)
C   NN      common/to_amps/  amp2,       jamp2
C   NN
C   NN      character*79         hel_buff
C   NN      common/to_helicity/  hel_buff
C   NN
C   NN      REAL*8 POL(2)
C   NN      common/to_polarization/ POL
C   NN
C   NN      integer          isum_hel
C   NN      logical                    multi_channel
C   NN      common/to_matrix/isum_hel, multi_channel
C   NN      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
C   NN      common/to_mconfigs/mapconfig, iconfig
C   NN      DATA NTRY,IDUM /0,-1/
C   NN      DATA xtry, xrej, ngood /0,0,0/
C   NN      DATA warned, isum_hel/.false.,0/
C   NN      DATA multi_channel/.true./
C   NN      SAVE yfrac, igood, jhel
C   NN      DATA NGRAPHS /    8/          
C   NN      DATA jamp2(0) /   2/          
C   NN      DATA GOODHEL/THEL*.FALSE./
      DATA (NHEL(IHEL,   1),IHEL=1, 6) /-1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,   2),IHEL=1, 6) /-1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,   3),IHEL=1, 6) /-1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,   4),IHEL=1, 6) /-1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,   5),IHEL=1, 6) /-1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,   6),IHEL=1, 6) /-1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,   7),IHEL=1, 6) /-1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,   8),IHEL=1, 6) /-1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,   9),IHEL=1, 6) /-1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  10),IHEL=1, 6) /-1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  11),IHEL=1, 6) /-1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  12),IHEL=1, 6) /-1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  13),IHEL=1, 6) /-1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  14),IHEL=1, 6) /-1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  15),IHEL=1, 6) /-1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  16),IHEL=1, 6) /-1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  17),IHEL=1, 6) /-1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  18),IHEL=1, 6) /-1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  19),IHEL=1, 6) /-1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  20),IHEL=1, 6) /-1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  21),IHEL=1, 6) /-1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  22),IHEL=1, 6) /-1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  23),IHEL=1, 6) /-1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  24),IHEL=1, 6) /-1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  25),IHEL=1, 6) /-1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  26),IHEL=1, 6) /-1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  27),IHEL=1, 6) /-1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  28),IHEL=1, 6) /-1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  29),IHEL=1, 6) /-1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  30),IHEL=1, 6) /-1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  31),IHEL=1, 6) /-1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  32),IHEL=1, 6) /-1, 1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  33),IHEL=1, 6) / 1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  34),IHEL=1, 6) / 1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  35),IHEL=1, 6) / 1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  36),IHEL=1, 6) / 1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  37),IHEL=1, 6) / 1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  38),IHEL=1, 6) / 1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  39),IHEL=1, 6) / 1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  40),IHEL=1, 6) / 1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  41),IHEL=1, 6) / 1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  42),IHEL=1, 6) / 1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  43),IHEL=1, 6) / 1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  44),IHEL=1, 6) / 1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  45),IHEL=1, 6) / 1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  46),IHEL=1, 6) / 1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  47),IHEL=1, 6) / 1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  48),IHEL=1, 6) / 1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  49),IHEL=1, 6) / 1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  50),IHEL=1, 6) / 1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  51),IHEL=1, 6) / 1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  52),IHEL=1, 6) / 1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  53),IHEL=1, 6) / 1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  54),IHEL=1, 6) / 1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  55),IHEL=1, 6) / 1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  56),IHEL=1, 6) / 1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  57),IHEL=1, 6) / 1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  58),IHEL=1, 6) / 1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  59),IHEL=1, 6) / 1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  60),IHEL=1, 6) / 1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  61),IHEL=1, 6) / 1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  62),IHEL=1, 6) / 1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  63),IHEL=1, 6) / 1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  64),IHEL=1, 6) / 1, 1, 1, 1, 1, 1/
      DATA (  IC(IHEL,  1),IHEL=1, 6) / 1, 2, 3, 4, 5, 6/
      DATA (IDEN(IHEL),IHEL=  1,  1) /  96/
C ----------
C BEGIN CODE
C ----------
C     ADDED ALL THESE LINES
      ANS(1) = 0D0
      PRINT *,"STARTING NCOMB=",NCOMB
      DO IHEL=1,NCOMB
        T= WpJJAlt(P1 ,MW,NHEL(1,IHEL))		
        ANS(1)=ANS(1)+T
C        PRINT *,"IHEL= ", IHEL," T= ",T," ME=",ANS(1)," IDEN(1)= "
        IF (T .GT. 0) THEN 
           PRINT *," IHEL= ", IHEL," T= ",T," ME=",ANS(1)," IDEN(1)= ",
     & DBLE(IDEN(1))
	ENDIF
      ENDDO
      
      ANS(1)=ANS(1)/DBLE(IDEN(1))
C     END ADDED ALL THESE LINES
C  NN      NTRY=NTRY+1
C  NN      DO IPROC=1,NCROSS
C  NN      CALL SWITCHMOM(P1,P,IC(1,IPROC),JC,6)
C  NN      DO IHEL=1,6
C  NN         JC(IHEL) = +1
C  NN      ENDDO
C  NN       
C  NN      IF (multi_channel) THEN
C  NN          DO IHEL=1,NGRAPHS
C  NN              amp2(ihel)=0d0
C  NN              jamp2(ihel)=0d0
C  NN          ENDDO
C  NN          DO IHEL=1,int(jamp2(0))
C  NN              jamp2(ihel)=0d0
C  NN          ENDDO
C  NN      ENDIF
C  NN      ANS(IPROC) = 0D0
C  NN      write(hel_buff,'(16i5)') (0,i=1,nexternal)
C  NN      IF (ISUM_HEL .EQ. 0 .OR. NTRY .LT. 10) THEN
C  NN          DO IHEL=1,NCOMB
C  NN             IF (GOODHEL(IHEL,IPROC) .OR. NTRY .LT. 2) THEN
C  NN                 T=WpJJAltM(P ,NHEL(1,IHEL),JC(1))            
C  NN               DO JJ=1,nincoming
C  NN                 IF(POL(JJ).NE.1d0.AND.
C  NN     &              NHEL(JJ,IHEL).EQ.INT(SIGN(1d0,POL(JJ)))) THEN
C  NN                   T=T*ABS(POL(JJ))
C  NN                 ELSE IF(POL(JJ).NE.1d0)THEN
C  NN                   T=T*(2d0-ABS(POL(JJ)))
C  NN                 ENDIF
C  NN               ENDDO
C  NN               ANS(IPROC)=ANS(IPROC)+T
C  NN               IF (T .NE. 0D0 .AND. .NOT.    GOODHEL(IHEL,IPROC)) THEN
C  NN                   GOODHEL(IHEL,IPROC)=.TRUE.
C  NN                   NGOOD = NGOOD +1
C  NN                   IGOOD(NGOOD) = IHEL
C  NN               ENDIF
C  NN             ENDIF
C  NN          ENDDO
C  NN          JHEL = 1
C  NN          ISUM_HEL=MIN(ISUM_HEL,NGOOD)
C  NN      ELSE              !RANDOM HELICITY
C  NN          DO J=1,ISUM_HEL
C  NN              JHEL=JHEL+1
C  NN              IF (JHEL .GT. NGOOD) JHEL=1
C  NN              HWGT = REAL(NGOOD)/REAL(ISUM_HEL)
C  NN              IHEL = IGOOD(JHEL)
C  NN              T=WpJJAltM(P ,NHEL(1,IHEL),JC(1))            
C  NN              DO JJ=1,nincoming
C  NN                IF(POL(JJ).NE.1d0.AND.
C  NN     &             NHEL(JJ,IHEL).EQ.INT(SIGN(1d0,POL(JJ)))) THEN
C  NN                  T=T*ABS(POL(JJ))
C  NN                ELSE IF(POL(JJ).NE.1d0)THEN
C  NN                  T=T*(2d0-ABS(POL(JJ)))
C  NN                ENDIF
C  NN              ENDDO
C  NN              ANS(IPROC)=ANS(IPROC)+T*HWGT
C  NN          ENDDO
C  NN          IF (ISUM_HEL .EQ. 1) THEN
C  NN              WRITE(HEL_BUFF,'(16i5)')(NHEL(i,IHEL),i=1,nexternal)
C  NN          ENDIF
C  NN      ENDIF
C  NN      IF (MULTI_CHANNEL) THEN
C  NN          XTOT=0D0
C  NN          DO IHEL=1,MAPCONFIG(0)
C  NN              XTOT=XTOT+AMP2(MAPCONFIG(IHEL))
C  NN          ENDDO
C  NN          IF (XTOT.NE.0D0) THEN
C  NN              ANS(IPROC)=ANS(IPROC)*AMP2(MAPCONFIG(ICONFIG))/XTOT
C  NN          ELSE
C  NN              ANS(IPROC)=0D0
C  NN          ENDIF
C  NN      ENDIF
C  NN      ANS(IPROC)=ANS(IPROC)/DBLE(IDEN(IPROC))
C  NN      ENDDO
      END
       
CCC   Remove IC and add MW         
      REAL*8 FUNCTION WpJJAlt(P,MW,NHEL)
C  
C Generated by MadGraph II                                              
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,6)
C  
C FOR PROCESS : u g -> e+ ve d g  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS,    NEIGEN 
      PARAMETER (NGRAPHS=   8,NEIGEN=  2) 
C     NN       include "genps.inc"
C     NN       include "nexternal.inc"
C     NN       include "maxamps.inc"
      INTEGER    NWAVEFUNCS     , NCOLOR
      PARAMETER (NWAVEFUNCS=  17, NCOLOR=   2) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C     ADDED MULTILINES BELOW
      INTEGER  maxamps
      double precision  Pi, Fourpi, Rt2, gfermi
      parameter( Pi = 3.14159265358979323846d0 )
      parameter( Fourpi = 4.0d0  * Pi )
      parameter( Rt2   = 1.414213562d0 )
      parameter( gfermi = 1.16639d-5 )
      parameter (maxamps=2500)
C     END ADDED MULTILINES BELOW
C  
C ARGUMENTS 
C  
      REAL*8 P(0:3,6)
C     Added single line below
      REAL*8 MH, MW
      INTEGER NHEL(6), IC(6)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,J,K
      COMPLEX*16 ZTEMP
      REAL*8 DENOM(NCOLOR), CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NGRAPHS), JAMP(NCOLOR)
      COMPLEX*16 W(18,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
C  
      Double Precision amp2(maxamps), jamp2(0:maxamps)
      common/to_amps/  amp2,       jamp2
C     NN        include "coupl.inc"
C  
C COLOR DATA
C  
      DATA Denom(1  )/            3/                                       
      DATA (CF(i,1  ),i=1  ,2  ) /    16,   -2/                            
C               T[ 5, 1, 2, 6]                                             
      DATA Denom(2  )/            3/                                       
      DATA (CF(i,2  ),i=1  ,2  ) /    -2,   16/                            
C               T[ 5, 1, 6, 2]    
C     Added multi lines below
      double precision beamEnergy,bMass,cMass,wMass,wWidth,zMass,topMass
      double precision sin2w,alpha,ee2,ee,tgwf,tgg,alphas,tsgg,sw,cw
      double precision ez,ey,gzu1,gzu2,gzd1,gzd2,gwwz,v,gwwh,ghbot,gh
      double complex gwf(2)
      double complex gg(2)
      double complex g(2)

      beamEnergy = 3500
      bMass = 4.7
      cMass = 1.42
      wMass = 80.419
      wWidth = 2.04759
      tgwf = -0.461905
      tgg = 1.2633
      tsgg = 1.22286

 


      gwf(1) = dcmplx(tgwf, Zero)
      gwf(2) = dcmplx(Zero, Zero)
      gg(1) = dcmplx(tgg, Zero)
      gg(2) = dcmplx(Zero, Zero)
      g(1) = dcmplx(tsgg, Zero)
      g(2) = dcmplx(Zero, Zero)

                                         
C ----------
C BEGIN CODE
C ----------
C  Remove the IC
      CALL IXXXXX(P(0,1   ),ZERO ,NHEL(1   ),+1,W(1,1   ))        
      CALL VXXXXX(P(0,2   ),ZERO ,NHEL(2   ),-1,W(1,2   ))        
      CALL IXXXXX(P(0,3   ),ZERO ,NHEL(3   ),-1,W(1,3   ))        
      CALL OXXXXX(P(0,4   ),ZERO ,NHEL(4   ),+1,W(1,4   ))        
      CALL OXXXXX(P(0,5   ),ZERO ,NHEL(5   ),+1,W(1,5   ))        
      CALL VXXXXX(P(0,6   ),ZERO ,NHEL(6   ),+1,W(1,6   ))        
      CALL JIOXXX(W(1,3   ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,7   ))    
      CALL FVOXXX(W(1,5   ),W(1,2   ),GG ,ZERO    ,ZERO    ,W(1,8   ))     
      CALL FVOXXX(W(1,8   ),W(1,7   ),GWF ,ZERO    ,ZERO    ,W(1,9   ))    
      CALL IOVXXX(W(1,1   ),W(1,9   ),W(1,6   ),GG ,AMP(1   ))             
      CALL FVIXXX(W(1,1   ),W(1,7   ),GWF ,ZERO    ,ZERO    ,W(1,10  ))    
      CALL JIOXXX(W(1,10  ),W(1,5   ),GG ,ZERO    ,ZERO    ,W(1,11  ))     
      CALL VVVXXX(W(1,6   ),W(1,2   ),W(1,11  ),G ,AMP(2   ))              
      CALL FVIXXX(W(1,10  ),W(1,2   ),GG ,ZERO    ,ZERO    ,W(1,12  ))     
      CALL IOVXXX(W(1,12  ),W(1,5   ),W(1,6   ),GG ,AMP(3   ))             
      CALL IOVXXX(W(1,10  ),W(1,8   ),W(1,6   ),GG ,AMP(4   ))             
      CALL FVOXXX(W(1,5   ),W(1,7   ),GWF ,ZERO    ,ZERO    ,W(1,13  ))    
      CALL FVOXXX(W(1,13  ),W(1,2   ),GG ,ZERO    ,ZERO    ,W(1,14  ))     
      CALL IOVXXX(W(1,1   ),W(1,14  ),W(1,6   ),GG ,AMP(5   ))             
      CALL JIOXXX(W(1,1   ),W(1,13  ),GG ,ZERO    ,ZERO    ,W(1,15  ))     
      CALL VVVXXX(W(1,6   ),W(1,2   ),W(1,15  ),G ,AMP(6   ))              
      CALL FVIXXX(W(1,1   ),W(1,2   ),GG ,ZERO    ,ZERO    ,W(1,16  ))     
      CALL FVIXXX(W(1,16  ),W(1,7   ),GWF ,ZERO    ,ZERO    ,W(1,17  ))    
      CALL IOVXXX(W(1,17  ),W(1,5   ),W(1,6   ),GG ,AMP(7   ))             
      CALL IOVXXX(W(1,16  ),W(1,13  ),W(1,6   ),GG ,AMP(8   ))             
      JAMP(   1) = +AMP(   1)-AMP(   2)+AMP(   4)+AMP(   5)-AMP(   6)
      JAMP(   2) = +AMP(   2)+AMP(   3)+AMP(   6)+AMP(   7)+AMP(   8)

C      JAMP(   1) = AMP(   1)
C      JAMP(   2) = ZERO

      WpJJAlt = 0.D0 
      DO I = 1, NCOLOR
          ZTEMP = (0.D0,0.D0)
          DO J = 1, NCOLOR
              ZTEMP = ZTEMP + CF(J,I)*JAMP(J)
          ENDDO
          WpJJAlt =WpJJAlt+ZTEMP*DCONJG(JAMP(I))/DENOM(I)  
C         print *, "fortran 'amp'", ZTEMP*DCONJG(JAMP(I))/DENOM(I)
      ENDDO
      Do I = 1, NGRAPHS
          amp2(i)=amp2(i)+amp(i)*dconjg(amp(i))
      Enddo
      Do I = 1, NCOLOR
          Jamp2(i)=Jamp2(i)+Jamp(i)*dconjg(Jamp(i))
      Enddo
C      If (WpJJAlt.ne.0) then
C      print *, 'helicityAmp1= ', Amp( 1)
C      print *, "Helicity:"
C      DO K = 1, 6
C         print *,NHel(K)
C      Enddo
C      Endif 
      END
       
           
