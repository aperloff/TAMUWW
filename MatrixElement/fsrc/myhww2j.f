      SUBROUTINE MYHWW2J(P1,MH, MW, ANS)
C  
C Generated by MadGraph II                                              
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C AND HELICITIES
C FOR THE POINT IN PHASE SPACE P(0:3,6)
C  
C FOR PROCESS : g g -> e+ ve u~ d  
C  
C Crossing   1 is g g -> e+ ve u~ d  
      IMPLICIT NONE
C  
C CONSTANTS
C  
C     NN      Include "genps.inc"
      INTEGER                 NCOMB,     NCROSS         
      PARAMETER (             NCOMB=  64, NCROSS=  1)
C     NN      INTEGER    THEL
C     NN      PARAMETER (THEL=NCOMB*NCROSS)
C  
C ARGUMENTS 
C  
      REAL*8 P1(0:3,6),ANS(NCROSS)
C  
C LOCAL VARIABLES 
C  
      INTEGER NHEL(6,NCOMB),NTRY
      REAL*8 T, P(0:3,6)
      REAL*8 MH, MW
      REAL*8 HWW2JET
      INTEGER IHEL,IDEN(NCROSS),IC(6,NCROSS)
      INTEGER IPROC,JC(6), I
      LOGICAL GOODHEL(NCOMB,NCROSS)
      INTEGER NGRAPHS
C     NN      REAL*8 hwgt, xtot, xtry, xrej, xr, yfrac(0:ncomb)
C     NN      INTEGER idum, ngood, igood(ncomb), jhel, j, jj
C     NN      LOGICAL warned
C     NN      REAL     xran1
C     NN      EXTERNAL xran1
C  
C GLOBAL VARIABLES
C  
C     NN      Double Precision amp2(maxamps), jamp2(0:maxamps)
C     NN      common/to_amps/  amp2,       jamp2
C     NN
C     NN      character*79         hel_buff
C     NN      common/to_helicity/  hel_buff
C     NN
C     NN      REAL*8 POL(2)
C     NN      common/to_polarization/ POL
C     NN
C     NN      integer          isum_hel
C     NN      logical                    multi_channel
C     NN      common/to_matrix/isum_hel, multi_channel
C     NN      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
C     NN      common/to_mconfigs/mapconfig, iconfig
C     NN      DATA NTRY,IDUM /0,-1/
C     NN      DATA xtry, xrej, ngood /0,0,0/
C     NN      DATA warned, isum_hel/.false.,0/
C     NN      DATA multi_channel/.true./
C     NN      SAVE yfrac, igood, jhel
C     NN      DATA NGRAPHS /    1/          
C     NN      DATA jamp2(0) /   1/          
C     NN      DATA GOODHEL/THEL*.FALSE./
      DATA (NHEL(IHEL,   1),IHEL=1, 6) /-1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,   2),IHEL=1, 6) /-1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,   3),IHEL=1, 6) /-1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,   4),IHEL=1, 6) /-1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,   5),IHEL=1, 6) /-1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,   6),IHEL=1, 6) /-1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,   7),IHEL=1, 6) /-1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,   8),IHEL=1, 6) /-1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,   9),IHEL=1, 6) /-1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  10),IHEL=1, 6) /-1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  11),IHEL=1, 6) /-1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  12),IHEL=1, 6) /-1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  13),IHEL=1, 6) /-1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  14),IHEL=1, 6) /-1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  15),IHEL=1, 6) /-1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  16),IHEL=1, 6) /-1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  17),IHEL=1, 6) /-1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  18),IHEL=1, 6) /-1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  19),IHEL=1, 6) /-1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  20),IHEL=1, 6) /-1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  21),IHEL=1, 6) /-1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  22),IHEL=1, 6) /-1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  23),IHEL=1, 6) /-1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  24),IHEL=1, 6) /-1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  25),IHEL=1, 6) /-1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  26),IHEL=1, 6) /-1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  27),IHEL=1, 6) /-1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  28),IHEL=1, 6) /-1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  29),IHEL=1, 6) /-1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  30),IHEL=1, 6) /-1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  31),IHEL=1, 6) /-1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  32),IHEL=1, 6) /-1, 1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  33),IHEL=1, 6) / 1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  34),IHEL=1, 6) / 1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  35),IHEL=1, 6) / 1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  36),IHEL=1, 6) / 1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  37),IHEL=1, 6) / 1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  38),IHEL=1, 6) / 1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  39),IHEL=1, 6) / 1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  40),IHEL=1, 6) / 1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  41),IHEL=1, 6) / 1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  42),IHEL=1, 6) / 1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  43),IHEL=1, 6) / 1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  44),IHEL=1, 6) / 1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  45),IHEL=1, 6) / 1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  46),IHEL=1, 6) / 1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  47),IHEL=1, 6) / 1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  48),IHEL=1, 6) / 1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  49),IHEL=1, 6) / 1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  50),IHEL=1, 6) / 1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  51),IHEL=1, 6) / 1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  52),IHEL=1, 6) / 1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  53),IHEL=1, 6) / 1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  54),IHEL=1, 6) / 1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  55),IHEL=1, 6) / 1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  56),IHEL=1, 6) / 1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  57),IHEL=1, 6) / 1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  58),IHEL=1, 6) / 1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  59),IHEL=1, 6) / 1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  60),IHEL=1, 6) / 1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  61),IHEL=1, 6) / 1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  62),IHEL=1, 6) / 1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  63),IHEL=1, 6) / 1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  64),IHEL=1, 6) / 1, 1, 1, 1, 1, 1/
      DATA (  IC(IHEL,  1),IHEL=1, 6) / 1, 2, 3, 4, 5, 6/
      DATA (IDEN(IHEL),IHEL=  1,  1) / 256/
C ----------
C BEGIN CODE
C ----------
      PRINT *," P1(E,px,py,pz) ",P1(0,1),P1(1,1),P1(2,1),P1(3,1)
      PRINT *," P2(E,px,py,pz) ",P1(0,2),P1(1,2),P1(2,2),P1(3,2)
      PRINT *," P3(E,px,py,pz) ",P1(0,3),P1(1,3),P1(2,3),P1(3,3)
      PRINT *," P4(E,px,py,pz) ",P1(0,4),P1(1,4),P1(2,4),P1(3,4)
      PRINT *," P5(E,px,py,pz) ",P1(0,5),P1(1,5),P1(2,5),P1(3,5)
      PRINT *," P6(E,px,py,pz) ",P1(0,6),P1(1,6),P1(2,6),P1(3,6)
C     ADDED ALL THESE LINES
      ANS(1) = 0D0
      PRINT *,"STARTING NCOMB=",NCOMB
      DO IHEL=1,NCOMB
        T= HWW2JET(P1 ,MH,MW,NHEL(1,IHEL))		
        ANS(1)=ANS(1)+T
C        PRINT *,"IHEL= ", IHEL," T= ",T," ME=",ANS(1)," IDEN(1)= "
        IF (T .GT. 0) THEN 
           PRINT *," IHEL= ", IHEL," T= ",T," ME=",ANS(1)," IDEN(1)= ",
     & DBLE(IDEN(1))
	ENDIF
      ENDDO
      
      ANS(1)=ANS(1)/DBLE(IDEN(1))
C     END ADDED ALL THESE LINES

C     NN      NTRY=NTRY+1
C     NN      DO IPROC=1,NCROSS
C     NN      CALL SWITCHMOM(P1,P,IC(1,IPROC),JC,6)
C     NN      DO IHEL=1,6
C     NN         JC(IHEL) = +1
C     NN      ENDDO
C     NN       
C     NN      IF (multi_channel) THEN
C     NN          DO IHEL=1,NGRAPHS
C     NN              amp2(ihel)=0d0
C     NN              jamp2(ihel)=0d0
C     NN          ENDDO
C     NN          DO IHEL=1,int(jamp2(0))
C     NN              jamp2(ihel)=0d0
C     NN          ENDDO
C     NN      ENDIF
C     NN      ANS(IPROC) = 0D0
C     NN      write(hel_buff,'(16i5)') (0,i=1,nexternal)
C     NN      IF (ISUM_HEL .EQ. 0 .OR. NTRY .LT. 10) THEN
C     NN          DO IHEL=1,NCOMB
C     NN             IF (GOODHEL(IHEL,IPROC) .OR. NTRY .LT. 2) THEN
C     NN                 T=MATRIX(P ,NHEL(1,IHEL),JC(1))            
C     NN               DO JJ=1,nincoming
C     NN                 IF(POL(JJ).NE.1d0.AND.
C     NN     &              NHEL(JJ,IHEL).EQ.INT(SIGN(1d0,POL(JJ)))) THEN
C     NN                   T=T*ABS(POL(JJ))
C     NN                 ELSE IF(POL(JJ).NE.1d0)THEN
C     NN                   T=T*(2d0-ABS(POL(JJ)))
C     NN                 ENDIF
C     NN               ENDDO
C     NN               ANS(IPROC)=ANS(IPROC)+T
C     NN               IF (T .NE. 0D0 .AND. .NOT.    GOODHEL(IHEL,IPROC)) THEN
C     NN                   GOODHEL(IHEL,IPROC)=.TRUE.
C     NN                   NGOOD = NGOOD +1
C     NN                   IGOOD(NGOOD) = IHEL
C     NN               ENDIF
C     NN             ENDIF
C     NN          ENDDO
C     NN          JHEL = 1
C     NN          ISUM_HEL=MIN(ISUM_HEL,NGOOD)
C     NN      ELSE              !RANDOM HELICITY
C     NN          DO J=1,ISUM_HEL
C     NN              JHEL=JHEL+1
C     NN              IF (JHEL .GT. NGOOD) JHEL=1
C     NN              HWGT = REAL(NGOOD)/REAL(ISUM_HEL)
C     NN              IHEL = IGOOD(JHEL)
C     NN              T=MATRIX(P ,NHEL(1,IHEL),JC(1))            
C     NN              DO JJ=1,nincoming
C     NN                IF(POL(JJ).NE.1d0.AND.
C     NN     &             NHEL(JJ,IHEL).EQ.INT(SIGN(1d0,POL(JJ)))) THEN
C     NN                  T=T*ABS(POL(JJ))
C     NN                ELSE IF(POL(JJ).NE.1d0)THEN
C     NN                  T=T*(2d0-ABS(POL(JJ)))
C     NN                ENDIF
C     NN              ENDDO
C     NN              ANS(IPROC)=ANS(IPROC)+T*HWGT
C     NN          ENDDO
C     NN          IF (ISUM_HEL .EQ. 1) THEN
C     NN              WRITE(HEL_BUFF,'(16i5)')(NHEL(i,IHEL),i=1,nexternal)
C     NN          ENDIF
C     NN      ENDIF
C     NN      IF (MULTI_CHANNEL) THEN
C     NN          XTOT=0D0
C     NN          DO IHEL=1,MAPCONFIG(0)
C     NN              XTOT=XTOT+AMP2(MAPCONFIG(IHEL))
C     NN          ENDDO
C     NN          IF (XTOT.NE.0D0) THEN
C     NN              ANS(IPROC)=ANS(IPROC)*AMP2(MAPCONFIG(ICONFIG))/XTOT
C     NN          ELSE
C     NN              ANS(IPROC)=0D0
C     NN          ENDIF
C     NN      ENDIF
C     NN      ANS(IPROC)=ANS(IPROC)/DBLE(IDEN(IPROC))
C     NN      ENDDO
      END
       
       
      REAL*8 FUNCTION HWW2JET(P,MH,MW,NHEL)
C  
C Generated by MadGraph II                                              
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,6)
C  
C FOR PROCESS : g g -> e+ ve u~ d  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS,    NEIGEN 
      PARAMETER (NGRAPHS=   1,NEIGEN=  1) 
C     NN      include "genps.inc"
      INTEGER    NWAVEFUNCS     , NCOLOR
      PARAMETER (NWAVEFUNCS=   9, NCOLOR=   1) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C     ADDED MULTILINES BELOW
      INTEGER  maxamps
      double precision  Pi, Fourpi, Rt2, gfermi
      parameter( Pi = 3.14159265358979323846d0 )
      parameter( Fourpi = 4.0d0  * Pi )
      parameter( Rt2   = 1.414213562d0 )
      parameter( gfermi = 1.16639d-5 )
      parameter (maxamps=2500)
C     END ADDED MULTILINES BELOW
C  
C ARGUMENTS 
C  
      REAL*8 P(0:3,6)
C     Added single line below
      REAL*8 MH, MW
      INTEGER NHEL(6), IC(6)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,J
      COMPLEX*16 ZTEMP
      REAL*8 DENOM(NCOLOR), CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NGRAPHS), JAMP(NCOLOR)
      COMPLEX*16 W(18,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
C  
      Double Precision amp2(maxamps), jamp2(0:maxamps)
      common/to_amps/  amp2,       jamp2
C      include "coupl.inc"
C  
C COLOR DATA
C  
      DATA Denom(1  )/            1/                                       
      DATA (CF(i,1  ),i=1  ,1  ) /     6/                                  
C               F[1, 2]T[ 6, 5]                                            
C     Added multi lines below
      double precision  sin2w,sw,alpha,ee,ee2,gw,v
      double precision  hmass,wmass,bmass,wwidth,hwidth,multi
      double complex gwf(2), ghbot(2)
      double complex gwwh   
      double complex gg(2),gh(2), auxRE;
      hmass   = MH !higgs pole mass
      wmass   = MW !W  pole mass mw=80.419d0
      bmass   = 4.7d0    !bottom pole mass
      wwidth  = 2.04759d0   
      sin2w=0.23120 
      sw  = sqrt( sin2w )
      alpha  = Rt2*gfermi*wmass**2*sin2w/pi      
      ee2 = alpha * Fourpi
      ee  = sqrt( alpha * Fourpi ) 
      gw   = ee/sw
C      Two = 2.0d0 
      gwf(1)  = dcmplx( -ee/sqrt(2.0d0*sin2w), Zero )
      gwf(2)  = dcmplx(  Zero              , Zero )
      v   = 2.0d0*wmass*sw/ee2   ! the wmass is used to calculate v
      gwwh    = dcmplx( ee2/sin2w*0.5d0*v, Zero )
C      hwidth  = 3.7d-3  
      multi = 100  
      hwidth  = multi*3*1.16639d-5*3.7*3.7*HMASS/(4*1.41421*3.1415927); 
C      PRINT *," hwidth hmass",hwidth,hmass
      ghbot(1) = dcmplx( -BMASS/v, Zero )
      ghbot(2) = ghbot(1)
C
      gg(1) = dcmplx(1.22286, 0.0)
      gg(2) = dcmplx(1.22286, 0.0)
      gh(1) = dcmplx(0.00005, 0.0)
      gh(2) = dcmplx(0.0, 0.0)     
C
C     END ADDED MULTILINES

C ----------
C BEGIN CODE
C ----------
      CALL VXXXXX(P(0,1   ),ZERO ,NHEL(1   ),-1,W(1,1   ))        
      CALL VXXXXX(P(0,2   ),ZERO ,NHEL(2   ),-1,W(1,2   ))        
      CALL IXXXXX(P(0,3   ),ZERO ,NHEL(3   ),-1,W(1,3   ))        
      CALL OXXXXX(P(0,4   ),ZERO ,NHEL(4   ),+1,W(1,4   ))        
      CALL IXXXXX(P(0,5   ),ZERO ,NHEL(5   ),-1,W(1,5   ))        
      CALL OXXXXX(P(0,6   ),ZERO ,NHEL(6   ),+1,W(1,6   ))        
      CALL HVVHXX(W(1,1   ),W(1,2   ), GH  , HMASS, HWIDTH, W(1,7 ))     
      CALL JIOXXX(W(1,3   ),W(1,4   ), GWF , WMASS, WWIDTH, W(1,8 ))    
      CALL JVSXXX(W(1,8   ),W(1,7   ), GWWH, WMASS, WWIDTH, W(1,9 ))         
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,9   ),GWF ,AMP(1   ))            
      JAMP(   1) =      2*( +AMP(   1))
C      Print *, 'GH=', GH, " GWF=",GWF, " GWWH=",GWWH, " HWID=",HWIDTH
C      Do I=1, 6
C         PRINT *, " W(I,3)=",W(I,3)
C      ENDDO
      HWW2JET = 0D0 
      DO I = 1, NCOLOR
          ZTEMP = (0.D0,0.D0)
          DO J = 1, NCOLOR
              ZTEMP = ZTEMP + CF(J,I)*JAMP(J)
          ENDDO
          HWW2JET = HWW2JET+ZTEMP*DCONJG(JAMP(I))/DENOM(I)   
      ENDDO
      Do I = 1, NGRAPHS
          amp2(i)=amp2(i)+amp(i)*dconjg(amp(i))
      Enddo
      Do I = 1, NCOLOR
          Jamp2(i)=Jamp2(i)+Jamp(i)*dconjg(Jamp(i))
      Enddo
C      CALL GAUGECHECK(JAMP,ZTEMP,EIGEN_VEC,EIGEN_VAL,NCOLOR,NEIGEN) 
      END
       
       
